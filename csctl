#!/bin/bash
action=$1
target=$2
args=$@

source ~/.cordysrc >/dev/null
CORDYS_BASE=${CORDYS_BASE:-/opt}
COMPOSE_FILES=$(cat ${CORDYS_BASE}/cordys/compose_files 2>/dev/null || echo "")
source ${CORDYS_BASE}/cordys/install.conf
export COMPOSE_HTTP_TIMEOUT=180

function usage() {
  echo "Cordys CRM 控制脚本"
  echo
  echo "Usage: "
  echo "  ./csctl.sh [COMMAND] [ARGS...]"
  echo "  ./csctl.sh --help"
  echo
  echo "Commands: "
  echo "  status    查看 Cordys CRM 服务运行状态"
  echo "  start     启动 Cordys CRM 服务"
  echo "  stop      停止 Cordys CRM 服务"
  echo "  restart   重启 Cordys CRM 服务"
  echo "  reload    重新加载 Cordys CRM 服务"
  echo "  uninstall 卸载 Cordys CRM 服务"
  echo "  version   查看 Cordys CRM 版本信息"
}

function generate_compose_files() {
  compose_files="-f docker-compose-base.yml -f docker-compose-cordys.yml"
  mkdir -p ${CORDYS_BASE}/cordys/logs/cordys-crm

  # 是否使用外部数据库
  if [ "${CORDYS_EXTERNAL_MYSQL}" = "false" ]; then
    mkdir -p ${CORDYS_BASE}/cordys/data/mysql
    chmod 655 ${CORDYS_BASE}/cordys/conf/mysql/my.cnf
    compose_files="${compose_files} -f docker-compose-mysql.yml"
  fi
  # 是否使用外部 Redis
  if [ "${CORDYS_EXTERNAL_REDIS}" = "false" ]; then
    mkdir -p ${CORDYS_BASE}/cordys/data/redis
    compose_files="${compose_files} -f docker-compose-redis.yml"
  fi

  # 是否使用外部 MCP 服务
  if [ "${CORDYS_MCP_EXTERNAL_SERVER}" = "false" ]; then
    compose_files="${compose_files} -f docker-compose-mcp.yml"
  fi

  echo ${compose_files} >${CORDYS_BASE}/cordys/compose_files
  chmod 777 -R ${CORDYS_BASE}/cordys/logs/cordys-crm
  chmod +rw -R ${CORDYS_BASE}/cordys/conf
  chmod +rw -R ${CORDYS_BASE}/cordys/*.yml
  COMPOSE_FILES=$(cat ${CORDYS_BASE}/cordys/compose_files 2>/dev/null || echo "")
}

function status() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} ps
}
function start() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} start ${target}
}
function stop() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} stop ${target}
}
function restart() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} stop ${target}
  docker-compose ${COMPOSE_FILES} start ${target}
}
function reload() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} up -d --remove-orphans
}
function uninstall() {
  echo
  cd ${CORDYS_BASE}/cordys
  docker-compose ${COMPOSE_FILES} down ${target}
  #
  rm -f ~/.cordysrc
  rm -f /usr/local/bin/csctl
}
function version() {
  echo
  cat ${CORDYS_BASE}/cordys/version
}

function main() {
  case "${action}" in
  status)
    status
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  reload)
    generate_compose_files
    reload
    ;;
  uninstall)
    uninstall
    ;;
  version)
    version
    ;;
  help)
    usage
    ;;
  --help)
    usage
    ;;
  generate_compose_files)
    generate_compose_files
    ;;
  *)
    echo
    cd ${CORDYS_BASE}/cordys
    docker-compose ${COMPOSE_FILES} $@
    ;;
  esac
}
main $@
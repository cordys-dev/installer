#!/bin/bash
set -euo pipefail

action=${1:-}
target=${2:-}
args=("$@")

# 加载配置
if [[ -f "$HOME/.cordysrc" ]]; then
  source "$HOME/.cordysrc" >/dev/null
fi
CORDYS_BASE=${CORDYS_BASE:-/opt}
COMPOSE_FILES=$(<"${CORDYS_BASE}/cordys/compose_files" 2>/dev/null || echo "")
source "${CORDYS_BASE}/cordys/install.conf"
export COMPOSE_HTTP_TIMEOUT=180

usage() {
  cat <<EOF
Cordys CRM 控制脚本

Usage:
  ./csctl.sh [COMMAND] [ARGS...]
  ./csctl.sh --help

Commands:
  status    查看 Cordys CRM 服务运行状态
  start     启动 Cordys CRM 服务
  stop      停止 Cordys CRM 服务
  restart   重启 Cordys CRM 服务
  reload    重新加载 Cordys CRM 服务
  upgrade   升级 Cordys CRM 至最新版本
  upgrade [RELEASE]  根据版本号搜索离线包，升级 Cordys CRM 至对应版本
  uninstall 卸载 Cordys CRM 服务
  version   查看 Cordys CRM 版本信息
EOF
}

generate_compose_files() {
  local compose_files="-f docker-compose-base.yml -f docker-compose-cordys.yml"
  mkdir -p "${CORDYS_BASE}/cordys/logs/cordys-crm"

  # 是否使用外部数据库
  if [[ "${CORDYS_EXTERNAL_MYSQL}" == "false" ]]; then
    mkdir -p "${CORDYS_BASE}/cordys/data/mysql"
    chmod 655 "${CORDYS_BASE}/cordys/conf/mysql/my.cnf"
    compose_files+=" -f docker-compose-mysql.yml"
  fi

  # 是否使用外部 Redis
  if [[ "${CORDYS_EXTERNAL_REDIS}" == "false" ]]; then
    mkdir -p "${CORDYS_BASE}/cordys/data/redis"
    compose_files+=" -f docker-compose-redis.yml"
  fi

  echo "$compose_files" >"${CORDYS_BASE}/cordys/compose_files"
  chmod 777 -R "${CORDYS_BASE}/cordys/logs/cordys-crm"
  chmod +rw -R "${CORDYS_BASE}/cordys/conf"
  chmod +rw -R "${CORDYS_BASE}/cordys/"*.yml
  COMPOSE_FILES=$(<"${CORDYS_BASE}/cordys/compose_files" 2>/dev/null || echo "")
}

download() {
  local git_urls=('github.com' 'hub.fastgit.org' 'ghproxy.com/https://github.com')
  local server_url=""

  for git_url in "${git_urls[@]}"; do
    local success=true
    for i in {1..3}; do
      echo -ne "检测 ${git_url} ... ${i} "
      if ! curl -m 5 -kIs "https://${git_url}" >/dev/null; then
        echo "failed"
        success=false
        break
      else
        echo "ok"
      fi
    done
    if [[ $success == true ]]; then
      server_url=$git_url
      break
    fi
  done

  if [[ -z $server_url ]]; then
    echo "没有找到稳定的下载服务器，请稍候重试"
    exit 1
  fi

  echo "使用下载服务器 ${server_url}"
  cd /tmp
  if ! wget -nv -T 60 -t 1 --no-check-certificate \
    "https://${server_url}/cordys/cordys/releases/download/${CORDYS_LATEST_VERSION}/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz" \
    -O "/tmp/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz"; then
    echo -e "\e[31m升级失败:连接下载服务器超时！\n可手动下载升级包，然后执行\e[1;33m csctl upgrade ${CORDYS_LATEST_VERSION} \e[0;31m离线升级\e[0m"
    return 2
  fi
}

status() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES ps
}

start() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES start "$target"
}

stop() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES stop "$target"
}

restart() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES stop "$target"
  docker-compose $COMPOSE_FILES start "$target"
}

reload() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES up -d --remove-orphans
}

uninstall() {
  echo
  cd "${CORDYS_BASE}/cordys"
  docker-compose $COMPOSE_FILES down "$target"
  rm -f "$HOME/.cordysrc" /usr/local/bin/csctl
}

version() {
  echo
  if [[ -f "${CORDYS_BASE}/cordys/.env" ]]; then
    grep -E '^CORDYS_IMAGE_TAG=' "${CORDYS_BASE}/cordys/.env" | cut -d'=' -f2
  else
    echo
    cat "${CORDYS_BASE}/cordys/version"
  fi
}

upgrade() {
  if ! curl -s https://api.github.com/repos/cordys-dev/cordys-crm/releases >/dev/null; then
    echo -e "\e[31m获取最新版本信息失败,请检查服务器到GitHub的网络连接是否正常！\e[0m"
    return 2
  fi

  export CORDYS_VERSION
  CORDYS_VERSION=$(
    awk -F= '/^[[:space:]]*CORDYS_IMAGE_TAG[[:space:]]*=/ {
      gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2);  # 去掉首尾空格
      print $2
      exit
    }' "${CORDYS_BASE}/cordys/.env"
  )
  echo -e "\e[32m 检测当前版本为\e[1;33m${CORDYS_VERSION} \e[0m"

  local release_pattern
  if [[ $CORDYS_VERSION == v1.* ]]; then
    release_pattern="v1\.[0-9]+\.[0-9]+-lts$"
  else
    release_pattern="v[0-9]+\.[0-9]+\.[0-9]+$"
  fi

  get_releases() {
    local page=$1
    local releases
    releases=$(curl -s "https://api.github.com/repos/cordys-dev/cordys-crm/releases?page=$page")
    releases=$(echo "$releases" | grep -o '"name": "[^"]*' | awk -F '[:"]' '{print $5}' | grep '^v')
    for release in $releases; do
      if [[ $release =~ $release_pattern ]]; then
        echo "$release"
        return 0
      fi
    done
    return 1
  }

  local latest_release=""
  for page in {1..10}; do
    latest_release=$(get_releases "$page") && break
  done

  echo "$latest_release" >/tmp/cordys_latest_release
  CORDYS_LATEST_VERSION=$(< /tmp/cordys_latest_release)

  if [[ -z $CORDYS_LATEST_VERSION ]]; then
    echo -e "未获取到最新版本"
    exit 1
  elif [[ $CORDYS_LATEST_VERSION == "$CORDYS_VERSION" ]]; then
    echo -e "最新版本与当前版本一致,退出升级过程"
    exit 0
  else
    echo -e "\e[32m 检测到GitHub上最新版本为\e[1;33m${CORDYS_LATEST_VERSION}\e[0;32m 即将执行在线升级...\e[0m"
  fi
  sleep 5

  if [[ -z $target ]]; then
    download
  else
    local __current_version=${CORDYS_VERSION%-*}
    local current_version=${__current_version:1}
    local current_version_arr=(${current_version//./ })

    local __target_version=${target%-*}
    local target_version=${__target_version:1}
    local target_version_arr=(${target_version//./ })

    current_version=$(printf '1%02d%02d%02d' "${current_version_arr[@]}")
    target_version=$(printf '1%02d%02d%02d' "${target_version_arr[@]}")

    if [[ $current_version == "$target_version" ]]; then
      echo -e "\e[31m当前版本与目标版本一致\e[0m"
      exit 2
    fi
    if (( current_version > target_version )); then
      echo -e "\e[31m不支持降级\e[0m"
      exit 2
    fi

    CORDYS_LATEST_VERSION=$target
    download
  fi

  if [[ "${CORDYS_ENTERPRISE_ENABLE}" == "true" ]]; then
    echo -e "\e[32m 企业版请通过离线包进行升级\e[0m"
    return 3
  fi

  local installer="/tmp/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz"
  if [[ ! -f $installer && ! -f "/tmp/cordys-ce-offline-installer-${CORDYS_LATEST_VERSION}.tar.gz" ]]; then
    echo -e "\e[31m未找到升级包\e[1;33m/tmp/cordys-*-installer-${CORDYS_LATEST_VERSION}.tar.gz\e[31m，请检查！\e[0m"
    echo -e "参考下载地址：\e[4;7mwget -T60 -t1 --no-check-certificate https://github.com/cordys-dev/cordys-crm/releases/download/${CORDYS_LATEST_VERSION}/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz -O /tmp/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz\e[0m"
    return 2
  fi

  cd /tmp
  tar zxvf "$installer"
  cd "cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}"
  /bin/bash install.sh
  rm -rf "/tmp/cordys-crm-ce-online-installer-${CORDYS_LATEST_VERSION}"
}

main() {
  case "$action" in
    status) status ;;
    start) start ;;
    stop) stop ;;
    restart) restart ;;
    reload) generate_compose_files; reload ;;
    upgrade) upgrade ;;
    uninstall) uninstall ;;
    version) version ;;
    help|--help) usage ;;
    generate_compose_files) generate_compose_files ;;
    *)
      echo
      cd "${CORDYS_BASE}/cordys"
      docker-compose $COMPOSE_FILES "${args[@]}"
      ;;
  esac
}

main "$@"
